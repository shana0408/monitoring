{"version":3,"sources":["../../src/config/config.js"],"names":["configTemplate","_","Ns1ConfigCtrl","$scope","$injector","backendSrv","appModel","secureJsonData","jsonData","gnetTokenSet","ns1Token","error","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","self","enabled","getCustomerId","then","resp","gnet_token","initDatasource","Promise","resolve","importDashboards","console","log","get","results","foundGraphite","foundElastic","forEach","ds","name","promises","graphite","type","url","access","push","post","elastic","database","esVersion","interval","timeField","all","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\nimport _ from 'lodash';\n\nclass Ns1ConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n    this.appModel.secureJsonData = {};\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {\n        gnetTokenSet: false,\n        ns1Token: null,\n      };\n    }\n    this.error = false;\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    var self = this;\n    if (this.appModel.enabled) { // jshint unused:false\n      this.getCustomerId().then((resp) => {}, () => {\n\n        // if we cant get the customerId, then we need to re-enter the ns1Token.\n        self.appModel.jsonData.ns1Token = null;\n        self.error = \"invalid NS1 apiKey. Please update the key.\";\n      });\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.gnet_token) {\n      this.appModel.jsonData.gnetTokenSet = true;\n    }\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    var self = this;\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n    // make sure our Api key works.\n    return this.getCustomerId()\n    .then((resp) => { // jshint unused:false\n      return this.appEditCtrl.importDashboards();\n    }, () => {\n      console.log(\"failed to query NS1 API.\");\n      self.error = \"Unable to query NS1 API. please re-enter API Key\";\n      self.appModel.jsonData.ns1Token = null;\n    });\n  }\n\n  getCustomerId() {\n    return this.backendSrv.get(\"api/plugin-proxy/ns1-app/ns1/account/settings\");\n  }\n\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('api/datasources').then(function(results) {\n      var foundGraphite = false;\n      var foundElastic = false;\n      _.forEach(results, function(ds) {\n        if (foundGraphite && foundElastic) { return; }\n        if (ds.name === \"raintank\") {\n          foundGraphite = true;\n        }\n        if (ds.name === \"raintankEvents\") {\n          foundElastic = true;\n        }\n      });\n      var promises = [];\n      if (!foundGraphite) {\n        // create datasource.\n        var graphite = {\n          name: 'raintank',\n          type: 'graphite',\n          url: 'api/plugin-proxy/ns1-app/graphite',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('api/datasources', graphite));\n      }\n      if (!foundElastic) {\n        // create datasource.\n        var elastic = {\n          name: 'raintankEvents',\n          type: 'elasticsearch',\n          url: 'api/plugin-proxy/ns1-app/elasticsearch',\n          access: 'direct',\n          database: '[events-]YYYY-MM-DD',\n          jsonData: {\n            esVersion: 1,\n            interval: \"Daily\",\n            timeField: \"timestamp\"\n          }\n        };\n        promises.push(self.backendSrv.post('api/datasources', elastic));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nNs1ConfigCtrl.template = configTemplate;\n\nexport {\n  Ns1ConfigCtrl as ConfigCtrl\n};\n"]}