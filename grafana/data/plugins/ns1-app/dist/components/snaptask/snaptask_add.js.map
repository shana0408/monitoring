{"version":3,"sources":["../../../src/components/snaptask/snaptask_add.js"],"names":["_","SnapTaskAddCtrl","$scope","$injector","$q","$location","backendSrv","alertSrv","pageReady","creatingTasks","addingZones","error","zones","monitoringJobs","taskType","newTask","queuedTask","ns1Token","getConfig","getZones","getMonitoringJobs","newTak","window","history","back","self","get","then","resp","jsonData","t","i","length","aQueuedTask","zone","undefined","$root","appEvent","queuedTaskExists","push","type","splice","indexOf","promises","forEach","task","addZoneTask","all","console","log","path","set","post","meta","code","message","reject","templateUrl"],"mappings":"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","file":"snaptask_add.js","sourcesContent":["import _ from 'lodash';\n\nclass SnapTaskAddCtrl {\n  constructor($scope, $injector, $q, $location, backendSrv, alertSrv) {\n    this.$q = $q;\n    this.$location = $location;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.$scope = $scope;\n    this.pageReady = true;\n    this.creatingTasks = false;\n    this.addingZones = false;\n    this.error = null;\n    this.zones = [];\n    this.monitoringJobs = [];\n    this.taskType = \"\";\n    this.newTask = {};\n    this.queuedTask = [];\n    this.ns1Token = null;\n    this.getConfig();\n    this.getZones();\n    this.getMonitoringJobs();\n  }\n\n  cancel() {\n    this.queuedTask = [];\n    this.newTak = {};\n    this.taskType = \"\";\n    window.history.back();\n  }\n\n  getConfig() {\n    var self = this;\n    this.backendSrv.get(\"api/plugins/ns1-app/settings\").then((resp) => {\n      self.ns1Token = resp.jsonData.ns1Token;\n      if (self.ns1Token) {\n        self.pageReady = true;\n      } else {\n        self.error =\"NS1 Api Key not configured.\";\n      }\n    });\n  }\n\n  // checks if the zone to be created is already in the list\n  queuedTaskExists(t) {\n    for (var i = 0; i < this.queuedTask.length; i++) {\n      var aQueuedTask = this.queuedTask[i];\n      if (aQueuedTask.zone === t.zone) {\n        return true;\n      }\n    }\n    return false;\n  }\n  addTask() {\n    // make sure a zone was selected\n    if ((this.newTask.zone === undefined) || (this.newTask.zone === \"\")) {\n      this.$scope.$root.appEvent('alert-error', ['Select a Zone from the dropdown', '']);\n      // clear\n      this.newTask = {};\n      return;\n    }\n    // check if it already exists in the list\n    if (!this.queuedTaskExists(this.newTask)) {\n      this.queuedTask.push({\n        type: \"zone\",\n        zone: this.newTask.zone\n      });\n      this.addingZones = true;\n    }\n    else {\n      this.$scope.$root.appEvent('alert-warning', ['Zone already queued for creation', '']);\n    }\n    // always clear\n    this.newTask = {};\n  }\n\n  removeQueuedTaskItem(t) {\n    if (this.queuedTask) {\n      this.queuedTask.splice(this.queuedTask.indexOf(t), 1);\n      if (this.queuedTask.length === 0) {\n        this.addingZones = false;\n      }\n    }\n  }\n\n  getZones() {\n    var self = this;\n    return this.backendSrv.get('api/plugin-proxy/ns1-app/ns1/zones').then((resp) =>{\n      self.zones = resp;\n    });\n  }\n  getMonitoringJobs() {\n    var self = this;\n    return this.backendSrv.get('api/plugin-proxy/ns1-app/ns1/monitoring/jobs').then((resp) =>{\n      self.monitoringJobs = resp;\n    });\n  }\n\n  create() {\n    var self = this;\n    this.creatingTasks = true;\n    var promises = [];\n    _.forEach(this.queuedTask, function(task) {\n      promises.push(self.addZoneTask(task.zone));\n    });\n\n    this.$q.all(promises).then(()=>{\n      console.log(\"finished creating tasks.\");\n      self.queuedTask = [];\n      self.creatingTasks = false;\n      self.addingZones = false;\n      self.$location.path(\"plugins/ns1-app/page/list-tasks\");\n    }, (resp)=>{\n      console.log(\"failed to add all tasks.\", resp);\n      self.creatingTasks = false;\n      self.alertSrv.set(\"failed to create task\", resp, 'error', 10000);\n    });\n  }\n\n  addZoneTask(zone) {\n    var task = {\n      \"name\": \"ns1-zone-\"+zone,\n      \"metrics\": {\"/raintank/apps/ns1/zones/*\":0},\n      \"config\": {\n        \"/raintank/apps/ns1\": {\n          \"ns1_key\": this.ns1Token,\n          \"zone\": zone\n        }\n      },\n      \"interval\": 300,\n      \"route\": { \"type\": \"any\"},\n      \"enabled\": true\n    };\n\n    return this.backendSrv.post(\"api/plugin-proxy/ns1-app/tasks\", task).then((resp) => {\n      if (resp.meta.code !== 200) {\n        console.log(\"request failed.\", resp.meta.message);\n        return this.$q.reject(resp.meta.message);\n      }\n    });\n  }\n}\n\nSnapTaskAddCtrl.templateUrl = 'public/plugins/ns1-app/components/snaptask/partials/snaptask_add.html';\nexport {SnapTaskAddCtrl};\n"]}